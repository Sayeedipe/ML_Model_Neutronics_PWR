function [y1] = Ffive(x1)
%FFIVE neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 06-Sep-2024 11:24:03.
% 
% [y1] = Ffive(x1) takes these arguments:
%   x = 6xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.007103819;10.00007172;0.000107052;1.80244e-07;0.00121195;1.250013759];
x1_step1.gain = [46.6479135834339;2.06314507196446;20.4357266815152;2000.42057642367;2.00248137680054;1.60010645956305];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.8784054248031784029;-0.74515982141694503404;-0.17960649527843758344;-0.2456742628350488955;-1.8472745392154712452];
IW1_1 = [-0.092209537492775897616 -0.02072293955576770888 -0.0078120517245916969509 0.1086820355136277616 0.65424850626139963161 0.38241150380162136635;0.063971722388232815648 0.010763865279787282817 -0.014832301367309383422 -0.020933458489897874277 -0.48333893665598021139 -0.17180972758441048764;0.12323222541474225522 0.020113168439267421761 0.0071960711459849828475 -0.1499274124550212528 0.24841249025819839291 -0.38794698393859883279;-0.041998474260841613115 -0.008988950191293221606 -0.00051008574925381379699 -0.39422291393485797695 -0.30038688608761476839 0.28993593933902450654;-0.92168887629020834762 -0.0020411125234040886078 0.011685745885033828328 0.01821866919111903016 0.037655599756107514808 0.0368984343325631306];

% Layer 2
b2 = [3.2965864655685503948;-0.068913519281435575703;-1.2149550542953433396;1.8478677059007015959;4.5476597709647137435];
LW2_1 = [-3.6350281286131194136 -0.97800626534542556278 -1.4826922226099821245 -2.087501668736417848 -0.2723273795014325982;3.0512315323968950409 1.6827250417381915959 0.73161930426964538743 1.1476769245073326076 3.1086775409609521681;1.9470217816327302085 3.0900705839930200369 0.6541710243852404405 0.24330537897009146819 -1.4182334938663383461;0.9638895788907350104 -2.335735534203291941 1.1221002156037793718 -0.54658457633182333524 1.3424263385963646211;5.9290451364017471292 -6.7283121871716149442 10.355463657147945256 -1.3016892491980640578 2.2082794731300046109];

% Layer 3
b3 = [-0.4995494393580336423;-0.49857780068209617275];
LW3_2 = [-2.0744238069290092952 -1.1037145094064837458 3.1492854809500023805 1.3342747924726403586 2.0198741728087545866;-2.0736606447316026092 -1.1023412387370514764 3.1492486137850628225 1.3339141701875436574 2.0196539470997789678];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.76394842214814;1.76469550179117];
y1_step1.xoffset = [0.14518;0.145];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = repmat(b3,1,Q) + LW3_2*a2;

% Output 1
y1 = mapminmax_reverse(a3,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
